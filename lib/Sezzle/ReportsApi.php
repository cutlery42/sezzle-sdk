<?php

/**
 * ReportsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sezzle API
 *
 * The Sezzle API is intended for merchants interested in accepting Sezzle Pay as a payment option.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Sezzle;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    protected \GuzzleHttp\ClientInterface $client;

    protected \OpenAPI\Client\Configuration $config;

    protected \OpenAPI\Client\HeaderSelector $headerSelector;

    /**
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $configuration = null,
        HeaderSelector $headerSelector = null,
        protected $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $configuration ?: new Configuration();
        $this->headerSelector = $headerSelector ?: new HeaderSelector();
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    public function getConfig(): \OpenAPI\Client\Configuration
    {
        return $this->config;
    }

    /**
     * Operation getInterestAccountActivity
     *
     * Interest Account Activity
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|object[]
     */
    public function getInterestAccountActivity($start_date, $end_date = null, $offset = null, $currency_code = null)
    {
        [$response] = $this->getInterestAccountActivityWithHttpInfo($start_date, $end_date, $offset, $currency_code);

        return $response;
    }

    /**
     * Operation getInterestAccountActivityWithHttpInfo
     *
     * Interest Account Activity
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInterestAccountActivityWithHttpInfo($start_date, $end_date = null, $offset = null, $currency_code = null)
    {
        $request = $this->getInterestAccountActivityRequest($start_date, $end_date, $offset, $currency_code);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        '\SplFileObject',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getInterestAccountActivityAsync
     *
     * Interest Account Activity
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountActivityAsync($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getInterestAccountActivityAsyncWithHttpInfo($start_date, $end_date, $offset, $currency_code)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getInterestAccountActivityAsyncWithHttpInfo
     *
     * Interest Account Activity
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountActivityAsyncWithHttpInfo($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\SplFileObject';
        $request = $this->getInterestAccountActivityRequest($start_date, $end_date, $offset, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInterestAccountActivity'
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountActivityRequest($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && $start_date === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getInterestAccountActivity'
            );
        }

        $resourcePath = '/interest/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // query params
        if (is_array($start_date)) {
            foreach ($start_date as $key => $value) {
                $queryParams[$key] = $value;
            }
        } else {
            $queryParams['start-date'] = $start_date;
        }

        // query params
        if ($end_date !== null) {
            if (is_array($end_date)) {
                foreach ($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['end-date'] = $end_date;
            }
        }

        // query params
        if ($offset !== null) {
            if (is_array($offset)) {
                foreach ($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }

        // query params
        if ($currency_code !== null) {
            if (is_array($currency_code)) {
                foreach ($currency_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['currency-code'] = $currency_code;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInterestAccountBalance
     *
     * Interest Account Balance
     *
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Sezzle\InlineResponse2004|object[]
     */
    public function getInterestAccountBalance($currency_code = null)
    {
        [$response] = $this->getInterestAccountBalanceWithHttpInfo($currency_code);

        return $response;
    }

    /**
     * Operation getInterestAccountBalanceWithHttpInfo
     *
     * Interest Account Balance
     *
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Sezzle\InlineResponse2004|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInterestAccountBalanceWithHttpInfo($currency_code = null)
    {
        $request = $this->getInterestAccountBalanceRequest($currency_code);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Sezzle\InlineResponse2004::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Sezzle\InlineResponse2004::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \OpenAPI\Client\Sezzle\InlineResponse2004::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        \OpenAPI\Client\Sezzle\InlineResponse2004::class,
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getInterestAccountBalanceAsync
     *
     * Interest Account Balance
     *
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountBalanceAsync($currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getInterestAccountBalanceAsyncWithHttpInfo($currency_code)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getInterestAccountBalanceAsyncWithHttpInfo
     *
     * Interest Account Balance
     *
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountBalanceAsyncWithHttpInfo($currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Sezzle\InlineResponse2004::class;
        $request = $this->getInterestAccountBalanceRequest($currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInterestAccountBalance'
     *
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInterestAccountBalanceRequest($currency_code = null): \GuzzleHttp\Psr7\Request
    {

        $resourcePath = '/interest/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_code !== null) {
            if (is_array($currency_code)) {
                foreach ($currency_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['currency-code'] = $currency_code;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSettlementDetails
     *
     * Settlement Details
     *
     * @param  string $payout_uuid Payout UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|object[]
     */
    public function getSettlementDetails($payout_uuid)
    {
        [$response] = $this->getSettlementDetailsWithHttpInfo($payout_uuid);

        return $response;
    }

    /**
     * Operation getSettlementDetailsWithHttpInfo
     *
     * Settlement Details
     *
     * @param  string $payout_uuid Payout UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSettlementDetailsWithHttpInfo($payout_uuid)
    {
        $request = $this->getSettlementDetailsRequest($payout_uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        '\SplFileObject',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getSettlementDetailsAsync
     *
     * Settlement Details
     *
     * @param  string $payout_uuid Payout UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementDetailsAsync($payout_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getSettlementDetailsAsyncWithHttpInfo($payout_uuid)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getSettlementDetailsAsyncWithHttpInfo
     *
     * Settlement Details
     *
     * @param  string $payout_uuid Payout UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementDetailsAsyncWithHttpInfo($payout_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\SplFileObject';
        $request = $this->getSettlementDetailsRequest($payout_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSettlementDetails'
     *
     * @param  string $payout_uuid Payout UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementDetailsRequest($payout_uuid): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'payout_uuid' is set
        if ($payout_uuid === null || (is_array($payout_uuid) && $payout_uuid === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_uuid when calling getSettlementDetails'
            );
        }

        $resourcePath = '/settlements/details/{payout_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        $resourcePath = str_replace(
            '{payout_uuid}',
            ObjectSerializer::toPathValue($payout_uuid),
            $resourcePath
        );


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSettlementSummaries
     *
     * Settlement Summaries
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|object[]
     */
    public function getSettlementSummaries($start_date, $end_date = null, $offset = null, $currency_code = null)
    {
        [$response] = $this->getSettlementSummariesWithHttpInfo($start_date, $end_date, $offset, $currency_code);

        return $response;
    }

    /**
     * Operation getSettlementSummariesWithHttpInfo
     *
     * Settlement Summaries
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSettlementSummariesWithHttpInfo($start_date, $end_date = null, $offset = null, $currency_code = null)
    {
        $request = $this->getSettlementSummariesRequest($start_date, $end_date, $offset, $currency_code);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getSettlementSummariesAsync
     *
     * Settlement Summaries
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementSummariesAsync($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getSettlementSummariesAsyncWithHttpInfo($start_date, $end_date, $offset, $currency_code)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getSettlementSummariesAsyncWithHttpInfo
     *
     * Settlement Summaries
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementSummariesAsyncWithHttpInfo($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->getSettlementSummariesRequest($start_date, $end_date, $offset, $currency_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSettlementSummaries'
     *
     * @param  string $start_date Start Date (required)
     * @param  string $end_date End Date (optional)
     * @param  string $offset Pagination Offset (Limit 20) (optional)
     * @param  string $currency_code ISO-4217 Currency Code (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getSettlementSummariesRequest($start_date, $end_date = null, $offset = null, $currency_code = null): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && $start_date === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getSettlementSummaries'
            );
        }

        $resourcePath = '/settlements/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // query params
        if (is_array($start_date)) {
            foreach ($start_date as $key => $value) {
                $queryParams[$key] = $value;
            }
        } else {
            $queryParams['start-date'] = $start_date;
        }

        // query params
        if ($end_date !== null) {
            if (is_array($end_date)) {
                foreach ($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['end-date'] = $end_date;
            }
        }

        // query params
        if ($offset !== null) {
            if (is_array($offset)) {
                foreach ($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }

        // query params
        if ($currency_code !== null) {
            if (is_array($currency_code)) {
                foreach ($currency_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['currency-code'] = $currency_code;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
