<?php

/**
 * CustomerApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sezzle API
 *
 * The Sezzle API is intended for merchants interested in accepting Sezzle Pay as a payment option.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Sezzle;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerApi
{
    protected \GuzzleHttp\ClientInterface $client;

    protected \OpenAPI\Client\Configuration $config;

    protected \OpenAPI\Client\HeaderSelector $headerSelector;

    /**
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $configuration = null,
        HeaderSelector $headerSelector = null,
        protected $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $configuration ?: new Configuration();
        $this->headerSelector = $headerSelector ?: new HeaderSelector();
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    public function getConfig(): \OpenAPI\Client\Configuration
    {
        return $this->config;
    }

    /**
     * Operation deleteV2Token
     *
     * Delete customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteV2Token($customer_uuid): void
    {
        $this->deleteV2TokenWithHttpInfo($customer_uuid);
    }

    /**
     * Operation deleteV2TokenWithHttpInfo
     *
     * Delete customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV2TokenWithHttpInfo($customer_uuid): array
    {
        $request = $this->deleteV2TokenRequest($customer_uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 401:
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation deleteV2TokenAsync
     *
     * Delete customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteV2TokenAsync($customer_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->deleteV2TokenAsyncWithHttpInfo($customer_uuid)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation deleteV2TokenAsyncWithHttpInfo
     *
     * Delete customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteV2TokenAsyncWithHttpInfo($customer_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        $request = $this->deleteV2TokenRequest($customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn ($response): array => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV2Token'
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteV2TokenRequest($customer_uuid): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'customer_uuid' is set
        if ($customer_uuid === null || (is_array($customer_uuid) && $customer_uuid === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_uuid when calling deleteV2Token'
            );
        }

        $resourcePath = '/customer/{customer_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        $resourcePath = str_replace(
            '{customer_uuid}',
            ObjectSerializer::toPathValue($customer_uuid),
            $resourcePath
        );


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV2Customer
     *
     * Get customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return SessionStatus|object[]|object[]
     */
    public function getV2Customer($customer_uuid)
    {
        [$response] = $this->getV2CustomerWithHttpInfo($customer_uuid);

        return $response;
    }

    /**
     * Operation getV2CustomerWithHttpInfo
     *
     * Get customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of SessionStatus|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV2CustomerWithHttpInfo($customer_uuid)
    {
        $request = $this->getV2CustomerRequest($customer_uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Sezzle\SessionStatus::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Sezzle\SessionStatus::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                case 404:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \OpenAPI\Client\Sezzle\SessionStatus::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        \OpenAPI\Client\Sezzle\SessionStatus::class,
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 401:
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getV2CustomerAsync
     *
     * Get customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerAsync($customer_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getV2CustomerAsyncWithHttpInfo($customer_uuid)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getV2CustomerAsyncWithHttpInfo
     *
     * Get customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerAsyncWithHttpInfo($customer_uuid): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Sezzle\SessionStatus::class;
        $request = $this->getV2CustomerRequest($customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV2Customer'
     *
     * @param  string $customer_uuid Customer UUID (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerRequest($customer_uuid): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'customer_uuid' is set
        if ($customer_uuid === null || (is_array($customer_uuid) && $customer_uuid === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_uuid when calling getV2Customer'
            );
        }

        $resourcePath = '/customer/{customer_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        $resourcePath = str_replace(
            '{customer_uuid}',
            ObjectSerializer::toPathValue($customer_uuid),
            $resourcePath
        );


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV2CustomerList
     *
     * Get list of customers
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Sezzle\InlineResponse200[]|object[]|object[]
     */
    public function getV2CustomerList()
    {
        [$response] = $this->getV2CustomerListWithHttpInfo();

        return $response;
    }

    /**
     * Operation getV2CustomerListWithHttpInfo
     *
     * Get list of customers
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Sezzle\InlineResponse200[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV2CustomerListWithHttpInfo()
    {
        $request = $this->getV2CustomerListRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Sezzle\InlineResponse200[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\InlineResponse200[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                case 404:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\OpenAPI\Client\Sezzle\InlineResponse200[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        '\OpenAPI\Client\Sezzle\InlineResponse200[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 401:
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation getV2CustomerListAsync
     *
     * Get list of customers
     *
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerListAsync(): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getV2CustomerListAsyncWithHttpInfo()
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation getV2CustomerListAsyncWithHttpInfo
     *
     * Get list of customers
     *
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerListAsyncWithHttpInfo(): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Sezzle\InlineResponse200[]';
        $request = $this->getV2CustomerListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV2CustomerList'
     *
     *
     * @throws \InvalidArgumentException
     */
    public function getV2CustomerListRequest(): \GuzzleHttp\Psr7\Request
    {

        $resourcePath = '/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV2CustomerOrder
     *
     * Create order by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  string $sezzle_request_id Unique client-generated ID to enforce idempotency (optional)
     * @param  \OpenAPI\Client\Sezzle\UNKNOWN_BASE_TYPE $unknown_base_type Order request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return SessionStatus|object[]|object[]|object[]|object[]
     */
    public function postV2CustomerOrder($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null)
    {
        [$response] = $this->postV2CustomerOrderWithHttpInfo($customer_uuid, $sezzle_request_id, $unknown_base_type);

        return $response;
    }

    /**
     * Operation postV2CustomerOrderWithHttpInfo
     *
     * Create order by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  string $sezzle_request_id Unique client-generated ID to enforce idempotency (optional)
     * @param  \OpenAPI\Client\Sezzle\UNKNOWN_BASE_TYPE $unknown_base_type Order request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of SessionStatus|object[]|object[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postV2CustomerOrderWithHttpInfo($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null)
    {
        $request = $this->postV2CustomerOrderRequest($customer_uuid, $sezzle_request_id, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Sezzle\SessionStatus::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Sezzle\SessionStatus::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                case 401:
                case 404:
                case 422:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \OpenAPI\Client\Sezzle\SessionStatus::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        \OpenAPI\Client\Sezzle\SessionStatus::class,
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 400:
                case 401:
                case 404:
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation postV2CustomerOrderAsync
     *
     * Create order by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  string $sezzle_request_id Unique client-generated ID to enforce idempotency (optional)
     * @param  \OpenAPI\Client\Sezzle\UNKNOWN_BASE_TYPE $unknown_base_type Order request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function postV2CustomerOrderAsync($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->postV2CustomerOrderAsyncWithHttpInfo($customer_uuid, $sezzle_request_id, $unknown_base_type)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation postV2CustomerOrderAsyncWithHttpInfo
     *
     * Create order by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  string $sezzle_request_id Unique client-generated ID to enforce idempotency (optional)
     * @param  \OpenAPI\Client\Sezzle\UNKNOWN_BASE_TYPE $unknown_base_type Order request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function postV2CustomerOrderAsyncWithHttpInfo($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Sezzle\SessionStatus::class;
        $request = $this->postV2CustomerOrderRequest($customer_uuid, $sezzle_request_id, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV2CustomerOrder'
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  string $sezzle_request_id Unique client-generated ID to enforce idempotency (optional)
     * @param  \OpenAPI\Client\Sezzle\UNKNOWN_BASE_TYPE $unknown_base_type Order request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function postV2CustomerOrderRequest($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'customer_uuid' is set
        if ($customer_uuid === null || (is_array($customer_uuid) && $customer_uuid === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_uuid when calling postV2CustomerOrder'
            );
        }

        $resourcePath = '/customer/{customer_uuid}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($sezzle_request_id !== null) {
            $headerParams['Sezzle-Request-Id'] = ObjectSerializer::toHeaderValue($sezzle_request_id);
        }

        // path params
        $resourcePath = str_replace(
            '{customer_uuid}',
            ObjectSerializer::toPathValue($customer_uuid),
            $resourcePath
        );


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation preapproveV2Token
     *
     * Preapprove amount by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  \OpenAPI\Client\Sezzle\Price $price Preapproval request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Sezzle\InlineResponse2001|object[]|object[]|object[]|object[]
     */
    public function preapproveV2Token($customer_uuid, $price = null)
    {
        [$response] = $this->preapproveV2TokenWithHttpInfo($customer_uuid, $price);

        return $response;
    }

    /**
     * Operation preapproveV2TokenWithHttpInfo
     *
     * Preapprove amount by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  \OpenAPI\Client\Sezzle\Price $price Preapproval request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Sezzle\InlineResponse2001|object[]|object[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function preapproveV2TokenWithHttpInfo($customer_uuid, $price = null)
    {
        $request = $this->preapproveV2TokenRequest($customer_uuid, $price);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() instanceof \Psr\Http\Message\ResponseInterface ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    sprintf('[%d] %s', $e->getCode(), $e->getMessage()),
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Sezzle\InlineResponse2001::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Sezzle\InlineResponse2001::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                case 401:
                case 404:
                case 422:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \OpenAPI\Client\Sezzle\InlineResponse2001::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $apiException) {
            switch ($apiException->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        \OpenAPI\Client\Sezzle\InlineResponse2001::class,
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
                case 400:
                case 401:
                case 404:
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $apiException->getResponseBody(),
                        'object[]',
                        $apiException->getResponseHeaders()
                    );
                    $apiException->setResponseObject($data);

                    break;
            }

            throw $apiException;
        }
    }

    /**
     * Operation preapproveV2TokenAsync
     *
     * Preapprove amount by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  \OpenAPI\Client\Sezzle\Price $price Preapproval request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function preapproveV2TokenAsync($customer_uuid, $price = null): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->preapproveV2TokenAsyncWithHttpInfo($customer_uuid, $price)
            ->then(
                fn ($response) => $response[0]
            );
    }

    /**
     * Operation preapproveV2TokenAsyncWithHttpInfo
     *
     * Preapprove amount by customer
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  \OpenAPI\Client\Sezzle\Price $price Preapproval request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function preapproveV2TokenAsyncWithHttpInfo($customer_uuid, $price = null): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Sezzle\InlineResponse2001::class;
        $request = $this->preapproveV2TokenRequest($customer_uuid, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'preapproveV2Token'
     *
     * @param  string $customer_uuid Customer UUID (required)
     * @param  \OpenAPI\Client\Sezzle\Price $price Preapproval request (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function preapproveV2TokenRequest($customer_uuid, $price = null): \GuzzleHttp\Psr7\Request
    {
        // verify the required parameter 'customer_uuid' is set
        if ($customer_uuid === null || (is_array($customer_uuid) && $customer_uuid === [])) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_uuid when calling preapproveV2Token'
            );
        }

        $resourcePath = '/customer/{customer_uuid}/preapprove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        $resourcePath = str_replace(
            '{customer_uuid}',
            ObjectSerializer::toPathValue($customer_uuid),
            $resourcePath
        );


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($price)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($price));
            } else {
                $httpBody = $price;
            }
        } elseif ($formParams !== []) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query !== '' && $query !== '0' ? '?' . $query : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
