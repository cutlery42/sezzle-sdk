diff --git a/composer.json b/composer.json
index 3fa4266e4e..13dc456a31 100644
--- a/composer.json
+++ b/composer.json
@@ -1,14 +1,6 @@
 {
+    "name": "sezzle/sdk",
     "description": "The Sezzle API is intended for merchants interested in accepting Sezzle Pay as a payment option.",
-    "keywords": [
-        "openapitools",
-        "openapi-generator",
-        "openapi",
-        "php",
-        "sdk",
-        "rest",
-        "api"
-    ],
     "homepage": "https://openapi-generator.tech",
     "license": "unlicense",
     "authors": [
@@ -14,8 +14,8 @@
         "ext-curl": "*",
         "ext-json": "*",
         "ext-mbstring": "*",
-        "guzzlehttp/guzzle": "^7.3",
-        "guzzlehttp/psr7": "^1.7 || ^2.0"
+        "guzzlehttp/guzzle": "^7.8",
+        "guzzlehttp/psr7": "^2.6.1"
     },
     "require-dev": {
         "phpunit/phpunit": "^8.0 || ^9.0",
diff --git a/lib/ObjectSerializer.php b/lib/ObjectSerializer.php
index e6ce9211d0..1c0903533a 100644
--- a/lib/ObjectSerializer.php
+++ b/lib/ObjectSerializer.php
@@ -333,7 +333,13 @@ class ObjectSerializer
             // this graceful.
             if (!empty($data)) {
                 try {
-                    return new \DateTime($data);
+                    // See https://discuss.newrelic.com/t/unexpected-warning-being-reported-in-apm-error-analytics/51652
+                    // Elastic APM reports this as an error because DateTime emits a warning and was implemented a bit hacky.
+                    $errorReportingBefore = error_reporting();
+                    error_reporting(0);
+                    $returnDateTime = @new \DateTime($data);
+                    error_reporting($errorReportingBefore);
+                    return $returnDateTime;
                 } catch (\Exception $exception) {
                     // Some API's return a date-time with too high nanosecond
                     // precision for php's DateTime to handle.
diff --git a/lib/Sezzle/Customer.php b/lib/Sezzle/Customer.php
index 2610464003..5a44824b84 100644
--- a/lib/Sezzle/Customer.php
+++ b/lib/Sezzle/Customer.php
@@ -64,6 +64,7 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         'last_name' => 'string',
         'phone' => 'string',
         'dob' => 'string',
+        'tokenize' => 'bool',
         'billing_address' => '\OpenAPI\Client\Sezzle\Address',
         'shipping_address' => '\OpenAPI\Client\Sezzle\Address'
     ];
@@ -81,6 +82,7 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         'last_name' => null,
         'phone' => null,
         'dob' => null,
+        'tokenize' => null,
         'billing_address' => null,
         'shipping_address' => null
     ];
@@ -118,7 +120,8 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         'phone' => 'phone',
         'dob' => 'dob',
         'billing_address' => 'billing_address',
-        'shipping_address' => 'shipping_address'
+        'shipping_address' => 'shipping_address',
+        'tokenize' => 'tokenize',
     ];
 
     /**
@@ -133,7 +136,8 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         'phone' => 'setPhone',
         'dob' => 'setDob',
         'billing_address' => 'setBillingAddress',
-        'shipping_address' => 'setShippingAddress'
+        'shipping_address' => 'setShippingAddress',
+        'tokenize' => 'setTokenize',
     ];
 
     /**
@@ -148,7 +152,8 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         'phone' => 'getPhone',
         'dob' => 'getDob',
         'billing_address' => 'getBillingAddress',
-        'shipping_address' => 'getShippingAddress'
+        'shipping_address' => 'getShippingAddress',
+        'tokenize' => 'getTokenize',
     ];
 
     /**
@@ -215,6 +220,7 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         $this->container['dob'] = $data['dob'] ?? null;
         $this->container['billing_address'] = $data['billing_address'] ?? null;
         $this->container['shipping_address'] = $data['shipping_address'] ?? null;
+        $this->container['tokenize'] = $data['tokenize'] ?? null;
     }
 
     /**
@@ -361,6 +367,25 @@ class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
         return $this;
     }
 
+    /**
+     * @param bool $tokenize
+     * @return $this
+     */
+    public function setTokenize(bool $tokenize)
+    {
+        $this->container['tokenize'] = $tokenize;
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     */
+    public function getTokenize(): bool
+    {
+        return $this->container['tokenize'] ?? false;
+    }
+
     /**
      * Gets billing_address
      *
diff --git a/lib/Sezzle/CustomerApi.php b/lib/Sezzle/CustomerApi.php
index 5020004a91..df3882a9c7 100644
--- a/lib/Sezzle/CustomerApi.php
+++ b/lib/Sezzle/CustomerApi.php
@@ -431,14 +431,14 @@ class CustomerApi
 
             switch($statusCode) {
                 case 200:
-                    if ('SessionStatus' === '\SplFileObject') {
+                    if ('\OpenAPI\Client\Sezzle\SessionStatus' === '\SplFileObject') {
                         $content = $response->getBody(); //stream goes to serializer
                     } else {
                         $content = (string) $response->getBody();
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\SessionStatus', []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -468,7 +468,7 @@ class CustomerApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -486,7 +486,7 @@ class CustomerApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -544,7 +544,7 @@ class CustomerApi
      */
     public function getV2CustomerAsyncWithHttpInfo($customer_uuid)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->getV2CustomerRequest($customer_uuid);
 
         return $this->client
@@ -1048,14 +1048,14 @@ class CustomerApi
 
             switch($statusCode) {
                 case 200:
-                    if ('SessionStatus' === '\SplFileObject') {
+                    if ('\OpenAPI\Client\Sezzle\SessionStatus' === '\SplFileObject') {
                         $content = $response->getBody(); //stream goes to serializer
                     } else {
                         $content = (string) $response->getBody();
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\SessionStatus', []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -1109,7 +1109,7 @@ class CustomerApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -1127,7 +1127,7 @@ class CustomerApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -1205,7 +1205,7 @@ class CustomerApi
      */
     public function postV2CustomerOrderAsyncWithHttpInfo($customer_uuid, $sezzle_request_id = null, $unknown_base_type = null)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->postV2CustomerOrderRequest($customer_uuid, $sezzle_request_id, $unknown_base_type);
 
         return $this->client
diff --git a/lib/Sezzle/Order.php b/lib/Sezzle/Order.php
index c17cd78cdd..32fb0ef16a 100644
--- a/lib/Sezzle/Order.php
+++ b/lib/Sezzle/Order.php
@@ -67,7 +67,9 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         'metadata' => 'array<string,string>',
         'shipping_amount' => '\OpenAPI\Client\Sezzle\Price',
         'tax_amount' => '\OpenAPI\Client\Sezzle\Price',
-        'checkout_expiration' => '\DateTime'
+        'checkout_expiration' => '\DateTime',
+        'intent' => 'string',
+        'order_amount' => '\OpenAPI\Client\Sezzle\Price',
     ];
 
     /**
@@ -86,7 +88,9 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         'metadata' => null,
         'shipping_amount' => null,
         'tax_amount' => null,
-        'checkout_expiration' => 'date-time'
+        'checkout_expiration' => 'date-time',
+        'intent' => null,
+        'order_amount' => null,
     ];
 
     /**
@@ -124,7 +128,9 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         'metadata' => 'metadata',
         'shipping_amount' => 'shipping_amount',
         'tax_amount' => 'tax_amount',
-        'checkout_expiration' => 'checkout_expiration'
+        'checkout_expiration' => 'checkout_expiration',
+        'intent' => 'intent',
+        'order_amount' => 'order_amount',
     ];
 
     /**
@@ -141,7 +147,9 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         'metadata' => 'setMetadata',
         'shipping_amount' => 'setShippingAmount',
         'tax_amount' => 'setTaxAmount',
-        'checkout_expiration' => 'setCheckoutExpiration'
+        'checkout_expiration' => 'setCheckoutExpiration',
+        'intent' => 'setIntent',
+        'order_amount' => 'setOrderAmount',
     ];
 
     /**
@@ -158,7 +166,9 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         'metadata' => 'getMetadata',
         'shipping_amount' => 'getShippingAmount',
         'tax_amount' => 'getTaxAmount',
-        'checkout_expiration' => 'getCheckoutExpiration'
+        'checkout_expiration' => 'getCheckoutExpiration',
+        'intent' => 'getIntent',
+        'order_amount' => 'getOrderAmount',
     ];
 
     /**
@@ -227,6 +237,8 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         $this->container['shipping_amount'] = $data['shipping_amount'] ?? null;
         $this->container['tax_amount'] = $data['tax_amount'] ?? null;
         $this->container['checkout_expiration'] = $data['checkout_expiration'] ?? null;
+        $this->container['intent'] = $data['intent'] ?? null;
+        $this->container['order_amount'] = $data['order_amount'] ?? null;
     }
 
     /**
@@ -252,6 +264,44 @@ class Order implements ModelInterface, ArrayAccess, \JsonSerializable
         return count($this->listInvalidProperties()) === 0;
     }
 
+    /**
+     * @return Price|null
+     */
+    public function getOrderAmount(): ?Price
+    {
+        return $this->container['order_amount'];
+    }
+
+    public function setOrderAmount(?Price $orderAmount) : self
+    {
+        $this->container['order_amount'] = $orderAmount;
+
+        return $this;
+    }
+
+    /**
+     * Gets intent
+     *
+     * @return string|null
+     */
+    public function getIntent()
+    {
+        return $this->container['intent'];
+    }
+
+    /**
+     * Sets Intent_id
+     *
+     * @param string|null $intent Intent
+     *
+     * @return self
+     */
+    public function setIntent($intent)
+    {
+        $this->container['intent'] = $intent;
+
+        return $this;
+    }
 
     /**
      * Gets reference_id
diff --git a/lib/Sezzle/OrderApi.php b/lib/Sezzle/OrderApi.php
index 5ff569d148..3362f847df 100644
--- a/lib/Sezzle/OrderApi.php
+++ b/lib/Sezzle/OrderApi.php
@@ -454,7 +454,7 @@ class OrderApi
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\SessionStatus', []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -484,7 +484,7 @@ class OrderApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -502,7 +502,7 @@ class OrderApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -560,7 +560,7 @@ class OrderApi
      */
     public function getV2OrderAsyncWithHttpInfo($order_uuid)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->getV2OrderRequest($order_uuid);
 
         return $this->client
@@ -1430,7 +1430,7 @@ class OrderApi
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\SessionStatus', []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -1484,7 +1484,7 @@ class OrderApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -1502,7 +1502,7 @@ class OrderApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -1580,7 +1580,7 @@ class OrderApi
      */
     public function postV2ReauthorizeByOrderAsyncWithHttpInfo($order_uuid, $sezzle_request_id = null, $price = null)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->postV2ReauthorizeByOrderRequest($order_uuid, $sezzle_request_id, $price);
 
         return $this->client
@@ -2558,7 +2558,7 @@ class OrderApi
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Sezzle\SessionStatus', []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -2612,7 +2612,7 @@ class OrderApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -2630,7 +2630,7 @@ class OrderApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -2708,7 +2708,7 @@ class OrderApi
      */
     public function postV2UpchargeByOrderAsyncWithHttpInfo($order_uuid, $sezzle_request_id = null, $inline_object3 = null)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->postV2UpchargeByOrderRequest($order_uuid, $sezzle_request_id, $inline_object3);
 
         return $this->client
diff --git a/lib/Sezzle/SessionApi.php b/lib/Sezzle/SessionApi.php
index 9b30cc1368..0249573e98 100644
--- a/lib/Sezzle/SessionApi.php
+++ b/lib/Sezzle/SessionApi.php
@@ -124,7 +124,7 @@ class SessionApi
      *
      * @throws \OpenAPI\Client\ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return SessionStatus|object[]|object[]|object[]
+     * @return SessionStatus|object[]
      */
     public function getV2Session($session_uuid)
     {
@@ -141,7 +141,7 @@ class SessionApi
      *
      * @throws \OpenAPI\Client\ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return array of SessionStatus|object[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
+     * @return SessionStatusExtended|object[] HTTP status code, HTTP response headers (array of strings)
      */
     public function getV2SessionWithHttpInfo($session_uuid)
     {
@@ -191,7 +191,7 @@ class SessionApi
                     }
 
                     return [
-                        ObjectSerializer::deserialize($content, 'SessionStatus', []),
+                        ObjectSerializer::deserialize($content, $request->getMethod() === 'GET' ? SessionStatusExtended::class : SessionStatus::class, []),
                         $response->getStatusCode(),
                         $response->getHeaders()
                     ];
@@ -233,7 +233,7 @@ class SessionApi
                     ];
             }
 
-            $returnType = 'SessionStatus';
+            $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
             if ($returnType === '\SplFileObject') {
                 $content = $response->getBody(); //stream goes to serializer
             } else {
@@ -251,7 +251,7 @@ class SessionApi
                 case 200:
                     $data = ObjectSerializer::deserialize(
                         $e->getResponseBody(),
-                        'SessionStatus',
+                        '\OpenAPI\Client\Sezzle\SessionStatus',
                         $e->getResponseHeaders()
                     );
                     $e->setResponseObject($data);
@@ -317,7 +317,7 @@ class SessionApi
      */
     public function getV2SessionAsyncWithHttpInfo($session_uuid)
     {
-        $returnType = 'SessionStatus';
+        $returnType = '\OpenAPI\Client\Sezzle\SessionStatus';
         $request = $this->getV2SessionRequest($session_uuid);
 
         return $this->client
diff --git a/lib/Sezzle/SessionStatusExtended.php b/lib/Sezzle/SessionStatusExtended.php
new file mode 100644
index 0000000000..39ab82f38d
--- /dev/null
+++ b/lib/Sezzle/SessionStatusExtended.php
@@ -0,0 +1,175 @@
+<?php
+
+namespace OpenAPI\Client\Sezzle;
+
+class SessionStatusExtended extends SessionStatus
+{
+    /**
+     * The original name of the model.
+     *
+     * @var string
+     */
+    protected static $openAPIModelName = 'SessionStatusExtended';
+
+    /**
+     * Array of property to type mappings. Used for (de)serialization
+     *
+     * @var string[]
+     */
+    protected static $openAPITypes = [
+        'uuid' => 'string',
+        'links' => '\OpenAPI\Client\Sezzle\Link[]',
+        'order' => 'object',
+        'tokenize' => 'object',
+    ];
+
+    /**
+     * Array of property to format mappings. Used for (de)serialization
+     *
+     * @var string[]
+     * @phpstan-var array<string, string|null>
+     * @psalm-var array<string, string|null>
+     */
+    protected static $openAPIFormats = [
+        'uuid' => null,
+        'links' => null,
+        'order' => null,
+        'tokenize' => null,
+    ];
+
+    /**
+     * Array of attributes where the key is the local name,
+     * and the value is the original name
+     *
+     * @var string[]
+     */
+    protected static $attributeMap = [
+        'uuid' => 'uuid',
+        'links' => 'links',
+        'order' => 'order',
+        'tokenize' => 'tokenize',
+    ];
+
+    /**
+     * Array of attributes to setter functions (for deserialization of responses)
+     *
+     * @var string[]
+     */
+    protected static $setters = [
+        'uuid' => 'setUuid',
+        'links' => 'setLinks',
+        'order' => 'setOrder',
+        'tokenize' => 'setTokenize',
+    ];
+
+    /**
+     * Array of attributes to getter functions (for serialization of requests)
+     *
+     * @var string[]
+     */
+    protected static $getters = [
+        'uuid' => 'getUuid',
+        'links' => 'getLinks',
+        'order' => 'getOrder',
+        'tokenize' => 'getTokenize',
+    ];
+
+    /**
+     * Array of property to type mappings. Used for (de)serialization
+     *
+     * @return array
+     */
+    public static function openAPITypes()
+    {
+        return self::$openAPITypes;
+    }
+
+    /**
+     * Array of property to format mappings. Used for (de)serialization
+     *
+     * @return array
+     */
+    public static function openAPIFormats()
+    {
+        return self::$openAPIFormats;
+    }
+
+    /**
+     * Array of attributes where the key is the local name,
+     * and the value is the original name
+     *
+     * @return array
+     */
+    public static function attributeMap()
+    {
+        return self::$attributeMap;
+    }
+
+    /**
+     * Array of attributes to setter functions (for deserialization of responses)
+     *
+     * @return array
+     */
+    public static function setters()
+    {
+        return self::$setters;
+    }
+
+    /**
+     * Array of attributes to getter functions (for serialization of requests)
+     *
+     * @return array
+     */
+    public static function getters()
+    {
+        return self::$getters;
+    }
+
+    /**
+     * The original name of the model.
+     *
+     * @return string
+     */
+    public function getModelName()
+    {
+        return self::$openAPIModelName;
+    }
+
+    /**
+     * Constructor
+     *
+     * @param mixed[] $data Associated array of property values
+     *                      initializing the model
+     */
+    public function __construct(array $data = null)
+    {
+        $this->container['uuid'] = $data['uuid'] ?? null;
+        $this->container['links'] = $data['links'] ?? null;
+        $this->container['order'] = $data['order'] ?? null;
+        $this->container['tokenize'] = $data['tokenize'] ?? null;
+    }
+
+    public function getOrder(): ?array
+    {
+        return $this->container['order'];
+    }
+
+    public function setOrder(?array $order): self
+    {
+        $this->container['order'] = $order;
+
+        return $this;
+    }
+
+    public function getTokenize(): ?array
+    {
+        return $this->container['tokenize'];
+    }
+
+    public function setTokenize(?array $tokenize): self
+    {
+        $this->container['tokenize'] = $tokenize;
+
+        return $this;
+    }
+}
